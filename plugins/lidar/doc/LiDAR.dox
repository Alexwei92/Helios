/*! \page "LiDARDoc" %LiDAR Point Cloud Plugin Documentation

 \image html LiDAR.png

 \tableofcontents

  <p> <br><br> </p>

  <table>
  <tr><th>Dependencies</th><td>NVIDIA CUDA 9.0+ <br>gcc/g++ 5.5+ <br>Visualizer plug-in</td></tr>
  <tr><th>CMakeLists.txt</th><td>set( PLUGINS "lidar" )</td></tr>
  <tr><th>Header File</th><td>#include "LiDAR.h"</td></tr>
  <tr><th>Class</th><td>\ref LiDARcloud</td></tr>
  </table>

  \section LiDARissues Known Issues

  - The LiDAR plug-in requires the Visualizer plug-in to be loaded in the CMakeLists.txt file. 

  \section LiDARintro Introduction

  The LiDAR plugin is used to process terrestrial LiDAR data into information that is useful for plant models.  For example, this may be to determine leaf area and angle distributions at the voxel scale, or to reconstruct individual leaves and add them to the Context.

  \section LiDARdepends Dependencies

  <table>
  <caption>Installing dependent packages</caption>
  <tr>
	<th>Package</th><td>\image html apple-logo.jpg</td>
	<td>\image html unix-logo.png</td>
	<td>\image html windows-logo.jpg</td>
  </tr>
  <tr>
	<td>NVIDIA CUDA 5.0+</td>
	<td>Mac OSX:<br><div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2"><code>$ brew install Caskroom/cask/cuda</code></div></td>
	<td>Debian/Ubuntu:<br><div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2"><code>$ sudo apt-get install cuda</code></div></td><td>Unknown</td>
  </tr>
  </table>

  \section LiDARConstructor Class Constructor

 <table>
 <tr><th>Constructors</th></tr>
 <tr><td>\ref LiDARcloud( void )</td></tr>
 </table>

 The \ref LiDARcloud class contains point cloud data, and is used to perform processing operations on the data. The class constructor does not take any arguments.

 \section LiDARbg Background information
  
 \subsection LiDARcoord Coordinates and scan pattern

 The algorithms associated with the LiDAR plug-in work with data obtained from a rectangular scan pattern.  In this scan pattern, points are sampled at equally spaced intervals in both the zenithal (\f$\theta\f$) and azimuthal (\f$\varphi\f$) directions.  At a given azimuthal angle, some range of zenithal angles are consecutively scanned, which represents a "scan line".  Each scan line starts at some zenithal angle \f$\theta\f$<sub>min</sub> and ends at some zenithal angle \f$\theta\f$<sub>max</sub>.  After recording a scan line at the first azimuthal angle \f$\varphi\f$<sub>min</sub>, the scanner incrementally moves to the next adjacent azimuthal scan direction and records the next scan line until it reaches the azimuthal angle \f$\varphi\f$<sub>max</sub>.

 The number of zenithal points within each scan line is given by \f$\mathrm{N}_{\theta}\f$, and the total number of scan lines (i.e., number of individual azimuthal directions) is is given by \f$\mathrm{N}_{\varphi}\f$.

 Angles are typically specified as degrees. Distance units are arbitrary, but must be used consistently.
  
 \image html CoordinateSystem.jpeg "Scan pattern: the scanner traverses some range of zenithal and azimuthal angles to explore a portion of the spherical space surrounding the scanner."

 \image html HitSchematic.jpeg "For each scan direction, the scanner records the (x,y,z) Cartesian position of the point of intersection between the ray path and the object's surface.  Each Cartesian position corresponds to spherical coordinate (zenith,azimuth) representing the scan direction."

 \image html RectangularScan.png "The rectangular scan pattern creates quadrilateral polygons between four neighboring points."

 \subsection ScanMetadata Scan metadata

 Each scan has a set of parameters or "metadata" that must be specified in order to process the data.  Some parameters are optional, while some are required.  The following metadata is needed to define the overall scan itself, in addition to individual scan hit points:

 <table>
 <tr><th>Metadata</th><th>Description</th><th>Default behavior</th></tr>
 <tr><td>Origin</td><td>(x,y,z) coordinate of the scanner.  This is the position where the scanner rays are sent from.</td><td>None: REQUIRED</td></tr>
 <tr><td>N<sub>theta</sub></td><td>Number of scan points in the theta (zenithal) direction, i.e., number of rows in scan point table.</td><td>None: REQUIRED</td></tr>
 <tr><td>\f$\theta\f$<sub>min</sub> (degrees)</td><td>Minimum scan theta (zenital) angle. \f$\theta\f$<sub>min</sub>=0 if the scan starts from upward vertical, \f$\theta\f$<sub>min</sub>=90 is the scan starts from horizontal, etc. </td><td>0</td></tr>
 <tr><td>\f$\theta\f$<sub>max</sub> (degrees)</td><td>Maximum scan theta (zenital) angle. \f$\theta\f$<sub>max</sub>=90 if the scan ends at horizontal, \f$\theta\f$<sub>min</sub>=180 is the scan ends at downward vertical, etc. </td><td>180</td></tr>
 <tr><td>N<sub>phi</sub></td><td>Number of scan points in the phi (azimuthal) direction, i.e., number of rows in scan point table.</td><td>None: REQUIRED</td></tr>
 <tr><td>\f$\varphi\f$<sub>min</sub> (degrees)</td><td>Minimum scan phi (azimuthal) angle. \f$\varphi\f$<sub>min</sub>=0 if the scan starts pointing in the +x direction, \f$\varphi\f$<sub>min</sub>=90 if the scan starts pointing in the +y direction, etc. </td><td>0</td></tr>
 <tr><td>\f$\varphi\f$<sub>max</sub> (degrees)</td><td>Maximum scan phi (azimuthal) angle. \f$\varphi\f$<sub>max</sub>=90 if the scan ends pointing in the +y direction, \f$\varphi\f$<sub>min</sub>=180 if the scan ends pointing in the -x direction, etc. NOTE: \f$\varphi\f$<sub>max</sub> could be greater than 360 if \f$\varphi\f$<sub>min</sub>>0 and the scanner makes a full rotation in the in the azimuthal direction, in which case \f$\varphi\f$<sub>max</sub>=\f$\varphi\f$<sub>min</sub>+360.</td><td>360</td></tr>
 <tr><td>translation</td><td>Global (x,y,z) translation to be applied to entire scan, including the origin and all hit ponts.</td><td>No translation.</td></tr>
 <tr><td>rotation (degrees)</td><td>Global spherical rotation (theta,phi) to be applied to the entire scan, including the origin and all hit ponts.</td><td>No rotation.</td></tr>
 </table>

 \subsection AddHits Hit point data

 In addition to scan metadata, the data collected by the scan itself must also be added to the plug-in.  At a minimum, this consists of the Cartesian (x,y,z) coordinates of each hit in the scan.  Additionally, hit points may also have an associated r-g-b color value, or some other scalar data value such as reflectance or temperature.  For the processing algorithms to work, the scan direction associated with each hit point must also be known.  This can be specified as a (\f$\theta\f$,\f$\varphi\f$) spherical coordinate, or using the row (i.e., index in the scanline: 1...\f$\mathrm{N}_\theta\f$) and column (i.e., scanline index: 1...\f$\mathrm{N}_\varphi\f$).
 
 <table>
 <tr><th>Data</th><th>Description</th><th>Default behavior</th></tr>
 <tr><td>(x,y,z) position</td><td>(x,y,z) coordinate of the hit point relative to the scan origin (i.e., the location of the scanner head).</td><td>None: REQUIRED</td></tr>
 <tr><td>ray direction</td><td>Spherical direction (theta, phi) of the ray.  Ray directions are used to construct the scan hit table.  There could be multiple hits for a given ray direction if a full-waveform instrument is used in multiple return mode.</td><td>Calculated automatically using the scanner origin and the (x,y,z) hit position.</td></tr>
 <tr><td>color</td><td>r-g-b color of scan hit point.</td><td>red</td></tr>
 <tr><td>data</td><td>Floating point data values associated with the hit point.  This could be reflectance, temperature, etc.</td><td>No data created.</td></tr>
 </table>
 

 <!--
  Some scanners provide the row and column of the point in the data table instead of the ray direction.  Functions are available in the code to convert between (row,column) and direction formats: \ref Scan::rc2direction() and \ref Scan::direction2rc().

  The following functions can be used to manually add hit point data to the scan:
  
  <table>
    <tr>	
      <th>Function</th>
    </tr>
    <tr>
      <td>\ref Scan::addHitPoint( helios::vec3 xyz, helios::SphericalCoord direction )</td>
    </tr>
    <tr>
      <td>\ref Scan::addHitPoint( helios::vec3 xyz )</td>
    </tr>
    <tr>
      <td>\ref Scan::addHitPoint( helios::vec3 xyz, helios::SphericalCoord direction )</td>
    </tr>
    <tr>
      <td>\ref Scan::addHitPoint( helios::vec3 xyz, helios::SphericalCoord direction, std::map<std::string, float> data )</td>
    </tr>
    <tr>
      <td>\ref Scan::addHitPoint( helios::vec3 xyz, helios::SphericalCoord direction, helios::RGBcolor color )</td>
    </tr>
    <tr>
      <td>\ref Scan::addHitPoint( helios::vec3 xyz, helios::SphericalCoord direction, helios::RGBcolor color, std::map<std::string, float> data )</td>
    </tr>
  </table>

  \section LiDARinit Initialization

  The LiDAR plug-in is initialized by defining an instance of the \ref LiDARcloud class.  In order to use the LiDARcloud class, you must

  1) add the "lidar" plug-in to your CMakeLists.txt file.  Make sure that the "PLUGINS" variable in your CMakeLists.txt file includes "lidar".

  <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
  <pre><code> #specify which plug-ins to use (separate plug-in names with semicolon)
   set( PLUGINS "lidar" )</code></pre></div>

  2) include the "LiDAR.h" header file.
  
  The code sample below shows a program that initializes the LiDAR plug-in.

  <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
  <pre><code> #include "Context.h"
   #include "LiDAR.h"

   using namespace helios;

   int main(int argc, char* argv[]){

      %LiDARcloud pointcloud; //Initialize the LiDAR point cloud
      
   }</code></pre></div>

  -->

 \section ScanIO Loading scan data from file

 Scan metadata is typically specified by loading an XML file containing the relevant metadata for each scan.  The XML file specifies the path to an ASCII text file that contains the data for each scan.  The code below gives a sample XML file for loading multiple scans.  As specified in the metadata table above, not all entries are required.

 <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
  <pre><code> <helios>

	<scan>
	  <filename> /path/to/data/file.xyz </filename>
	  <ASCII_format> zenith azimuth x y z r255 g255 b255 </ASCII_format>
	  <origin> 0 0 0 </origin>
	  <size> 2500 4500 </size>
	  <thetaMin> 30 </thetaMin> \<!-- OPTIONAL - default: 0 -->
	  <thetaMax> 130 </thetaMax> \<!-- OPTIONAL - default: 180 -->
	  <phiMin> 0 </phiMin> \<!-- OPTIONAL - default: 0 -->
	  <phiMax> 360 </phiMax> \<!-- OPTIONAL - default: 360 -->
	  <translation> 1.2 1.5 -10.2 </translation> \<!-- OPTIONAL - default: 0 0 0 -->
	  <rotation> 20 180 </rotation> \<!-- OPTIONAL - default: 0 0 -->
	  <distanceFilter> 50 </distanceFilter> \<!-- OPTIONAL - default: Infinity -->
	  <reflectance> 1300 </reflectance> \<!-- OPTIONAL - user-defined data -->
	</scan>
 </helios></code></pre></div>

 The ASCII text file containing the data is a plain text file, where each row corresponds to a hit point and each column is some data value associated with that hit point.  The "ASCII_format" tag defines the column format of the ASCII text file (in this case, file.xyz).  Each entry in the list specifies the meaning of each column.  Possible fields are listed in the table below:

 <table>
 <tr><th>Label</th><th>Description</th><th>Default behavior</th></tr>
 <tr><td>x</td><td>x-component of the (x,y,z) Cartesian coordinate of the hit point.</td><td>None: REQUIRED</td></tr>
 <tr><td>y</td><td>y-component of the (x,y,z) Cartesian coordinate of the hit point.</td><td>None: REQUIRED</td></tr>
 <tr><td>z</td><td>z-component of the (x,y,z) Cartesian coordinate of the hit point.</td><td>None: REQUIRED</td></tr>
 <tr><td>zenith (or zenith_rad)</td><td>Zenithal angle (degrees) of scan ray direction corresponding to the hit point. If "theta_rad" is used, theta has units of radians rather than degrees.</td><td>Calculated from scan origin and hit (x,y,z).</td></tr>
 <tr><td>azimuth (or phi_rad)</td><td>Azithal angle (degrees) of scan ray direction corresponding to the hit point. If "phi_rad" is used, phi has units of radians rather than degrees.</td><td>Calculated from scan origin and hit (x,y,z).</td></tr>
 <tr><td>r (or r255)</td><td>red component of (r,g,b) hit color.  If "r" tag is used, r is a floating point value and 0<r<1.  If "r255" is used, r is an integer and 0<r<255.</td><td>r=1 or r255=255</td></tr>
 <tr><td>g (or g255)</td><td>green component of (r,g,b) hit color.  If "g" tag is used, g is a floating point value and 0<g<1.  If "g255" is used, g is an integer and 0<g<255.</td><td>g=0 or g255=0</td></tr>
 <tr><td>b (or b255)</td><td>blue component of (r,g,b) hit color.  If "b" tag is used, b is a floating point value and 0<b<1.  If "b255" is used, b is an integer and 0<b<255.</td><td>b=0 or b255=0</td></tr>
 <tr><td>(label)</td><td>User-defined floating-point data value.  "label" can be any string describing data.  For example, "reflectance", "temperature", etc. </td><td>N/A</td></tr>
 </table>

 The XML file can be automatically loaded into the point cloud using the \ref loadXML() function, as illustrated below.
  
 <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
 <pre><code> #include "Context.h"
   #include "LiDAR.h"

   using namespace helios;

   int main( void ){

      %LiDARcloud pointcloud; //Initialize the LiDAR point cloud

      pointcloud.loadXML("/path/to/file.xml");
      
 }</code></pre></div>

 \section LiDARgrid Establishing grid cells

 Rectangular grid cells are used as the basis for processing point cloud data.  For example, total leaf area (or leaf area density) may be calculated for each grid cell. Grid cells or "voxels" are parallelpiped volumes.  The top and bottom faces are always horizontal, but the cells can be rotated in the azimuthal direction.

 Grid cells are defined by specifying the (x,y,z) position of its center, and the size of the cell in the x, y, and z directions.  Additional optional information can also be provided for grid cells, which are detailed below.

 <table>
 <tr><th>Tag</th><th>Description</th><th>Default behavior</th></tr>
 <tr><td>center</td><td>(x,y,z) Cartesian coordinates of cell center.</td><td>None: required.</td></tr>
 <tr><td>size</td><td>Length of cell sides in x, y, and z directions.</td><td>None: required.</td></tr>
 <tr><td>rotation</td><td>Azimuthal rotation of the cell in degrees.</td><td>0</td></tr>
 <tr><td>Nx</td><td>Grid cell subdivisions in the x-direction.</td><td>1</td></tr>
 <tr><td>Ny</td><td>Grid cell subdivisions in the y-direction.</td><td>1</td></tr>
 <tr><td>Nz</td><td>Grid cell subdivisions in the z-direction.</td><td>1</td></tr>
 </table>

 The grid cell subdivisions options allow the cells to be easily split up into a grid of smaller cells.  For example, Nx=Ny=Nz=3 would create 27 grid cells similar to a "Rubik's cube".

 Grid cell options can be specified in an XML file using the tags listed in the table above.  Multiple grid cells are added by simply adding more <grid>...</grid> groups to the XML file.

 <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
  <pre><code> <grid>
	 \<center> 0 0 0.5 \</center>
	 \<size> 1 1 1 </size>
	 \<rotation> 30 </rotation> \<!-- OPTIONAL - default: 0 -->
	 \<Nx> 3 </Nx> \<!-- OPTIONAL - default: 1 -->
	 \<Ny> 3 </Ny> \<!-- OPTIONAL - default: 1 -->
	 \<Nz> 3 </Nz> \<!-- OPTIONAL - default: 1 -->
  </grid></code></pre></div>


 One way to figure out the appropriate dimension and position of the voxel grid is using the visualizer and trial-and-error. Make a guess of the voxel parameters, then visualize the point cloud and voxels together and adjust accordingly. This can be tedious and time-consuming because you need to re-run the entire code each time.

An often faster way to figure out the dimensions of the voxel grid is to use point cloud visualization software such as <a href="https://www.cloudcompare.org">Cloud Compare</a>. Load the point cloud data into Cloud Compare, then add a Box (file->Primitive Factory). You can translate or rotate the box by clicking on the Box object in the DB Tree pane, then select the menu item Edit->Translate/Rotate. To change the box size, click on the box vertices in the DB Tree pane, then go to Edit->Multiply/Scale. You can then find the resulting box location and dimensions in the Properties pane.

 \image html LiDARvoxelgrid.png
  
 \section LiDARprocess Processing LiDAR data
  
  \subsection LiDARtri Hit point triangulation

  A triangulation between adjacent points is typically required for any of the available data processing algorithms.  In the triangulation, adjacent hit points are connected to form a mesh of triangular solid surfaces.  The algorithm for performing this triangulation is described in detail in <a href="dx.doi.org/doi:10.1016/j.rse.2017.03.011">Bailey and Mahaffee (2017a)</a>.

  There are two possible options to be specified when performing the triangulation.  A required option is \f$L_{max}\f$, which is the maximum allowable length of a triangle side.  This parameter prevents triangles from connecting adjacent leaves (i.e., we only want triangles to be formed with neighboring points on the same leaf).  Typically we want \f$L_{max}\f$ to be much larger than the spacing between adjacent hit points, and much smaller than the characteristic length of a leaf.  For example, <a href="dx.doi.org/doi:10.1016/j.rse.2017.03.011">Bailey and Mahaffee (2017a)</a> used 5cm for a cottonwood tree.

  Another optional parameter is the maximum allowable aspect ratio of a triangle, which is the ratio of the length of the longest triangle side to the shortest triangle side. This has a similar effect as the \f$L_{max}\f$ parameter, and works better in some cases.

  The following code sample illustrates how to perform a triangulation.

  <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
  <pre><code> #include "Context.h"
  #include "LiDAR.h"

  using namespace helios;

  int main( void ){

     %LiDARcloud pointcloud; //Initialize the LiDAR point cloud

     pointcloud.loadXML("/path/to/file.xml");  //Load the XML file

     pointcloud.triangulateHitPoints( 0.05, 5 ); //Perform triangulation with Lmax=0.05 and maximum aspect ratio of 5 
      
  }</code></pre></div>

  

  <!--
      \image html HitTable.png "The rectangular scan pattern creates a two-dimensional table of scan directions in spherical space (left).  If an object was hit by the scanner at a given scan direction, the instrument records the Cartesian coordinate of that hit location (right)."
   -->

  \subsection LiDARleafarea Calculating leaf area for each grid cell

  Using the triangulation and defined grid cells, the plug-in can calculate the leaf area (and leaf area density) for each grid cell.  The algorithm for calculating leaf area is described in detail in <a href="dx.doi.org/doi:10.1088/1361-6501/aa5cfd">Bailey and Mahaffee (2017b)</a>.

  Performing the calculations is simple and requires no inputs, which is illustrated with the following code sample. Note that the leaf area calculation requires that the triangulation has been performed beforehand.  If no triangulation is available, the plug-in will assume a uniformly distributed leaf angle orientation (\f$G=0.5\f$).  The leaf area calculation also requires that at least one grid cell was defined.

  <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
  <pre><code> #include "Context.h"
  #include "LiDAR.h"

  using namespace helios;

  int main( void ){

     %LiDARcloud pointcloud; //Initialize the LiDAR point cloud

     pointcloud.loadXML("/path/to/file.xml");  //Load the XML file

     pointcloud.triangulateHitPoints( 0.05, 5 ); //Perform triangulation with Lmax=0.05 and maximum aspect ratio of 5

     pointcloud.calculateLeafAreaGPU(); //Calculate leaf area for each grid cell
      
  }</code></pre></div>

  \subsection LiDARresonstruction Plant reconstruction

  A leaf-by-leaf reconstruction can be performed for the plant of interest using the method described in <a href="https://www.sciencedirect.com/science/article/pii/S0034425718300191?via%3Dihub">Bailey and Ochoa (2018)</a>. The reconstruction utilizes the triangulation and leaf area computations to ensure the correct leaf angle and area distributions on average, and thus requires that these routines have been run before performing the reconstruction.

  There are two types of available reconstructions. One is a triangular reconstruction that directly uses triangles resulting from the triangulation to produce the reconstruction. The advantage is that it doesn not require any assumption about the shape of the leaf and can give a more direct reconstruction in some cases, however this reconstruction is typically not recommended as it often results in many small triangle groups that don't necessarily resemble actual leaves. This reconstruction is performed using the \ref leafReconstructionTriangular() function, whose arguments are thresholds for the minimum and maximum area of reconstructed triangular leaf groups.

  The other type of reconstruction is the "Alpha Mask" reconstruction, which replaces the triangle groups with a "prototype" leaf (which is an alpha mask). This ensures that all reconstructed leaves are representative of an actual leaf in terms of shape and size. This reconstruction is performed using the \ref leafReconstructionAlphaMask() function. This function's arguments, in addition to area thresholds, are the aspect ratio of the prototype leaf (length along midrib divided by width perpendicular to midrib) and the path to a PNG image file to be used for the leaf alpha mask.

  There is a function that can automatically add all reconstructed elements (triangles or alpha masks) to the Helios Context, which is \ref addLeafReconstructionToContext().
  
  Below is an example of performing a reconstruction using alpha masks and adding the alpha masks to the Context.

  <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
  <pre><code> #include "Context.h"
  #include "LiDAR.h"

  using namespace helios;

  int main( void ){

     %LiDARcloud pointcloud; //Initialize the LiDAR point cloud

     pointcloud.loadXML("/path/to/file.xml");  //Load the XML file

     pointcloud.triangulateHitPoints( 0.05, 5 ); //Perform triangulation with Lmax=0.05 and maximum aspect ratio of 5

     pointcloud.calculateLeafAreaGPU(); //Calculate leaf area for each grid cell

     pointcloud.leafReconstructionAlphaMask( 0.001, 0.02, "plugins/visualizer/textures/ElmLeaf.png" ); //Perform the reconstruction

     Context context; //Initialize the Context

     pointcloud.addLeafReconstructionToContext( &context );
      
  }</code></pre></div>

  \section LiDARvis Visualizing results

  Results can be visualized using the Visualizer plug-in for Helios.  There are two possible means for doing so.  First, is to add the relevant geometry to the Context, then visualize primitives in the Context using the Visualizer.  This works for the triangulation and plant reconstructions, but cannot be used to visualize just the point cloud since there is no "point" primitive in the Context. The next section describes how to accomplish this.

  The second option is to add any geometry directly to the Visualizer.  There are several functions build in to the LiDAR plug-in that can to this automatically, which are listed below.

 <table>
 <tr><th>Function</th><th>Description</th></tr>
 <tr><td>\ref LiDARcloud::addHitsToVisualizer( Visualizer * visualizer, const uint pointsize )</td><td>Add all hits in the point cloud to the visualizer.</td></tr>
 <tr><td>\ref LiDARcloud::addGridToVisualizer( Visualizer * visualizer )</td><td>Add all grid cells to the visualizer, which are displayed as translucent voxels.</td></tr>
 <tr><td>\ref LiDARcloud::addTrianglesToVisualizer( Visualizer * visualizer )</td><td>Add all triangles to the visualizer, which are colored by the r-g-b color value.</td></tr>
 <tr><td>\ref LiDARcloud::addTrianglesToVisualizer( Visualizer * visualizer, const uint gridcell )</td><td>Add triangles from a specified grid cell to the visualizer, which are colored by the r-g-b color value.</td></tr>
 </table>

  The following code sample illustrates how to visualize the point cloud.

  <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
  <pre><code>  #include "Context.h"
   #include "LiDAR.h"
   #include "Visualizer.h"   

   using namespace helios;

   int main( void ){

      %LiDARcloud pointcloud; //Initialize the LiDAR point cloud

      pointcloud.loadXML("/path/to/file.xml");  //Load the XML file

      %Visualizer vis( 1000 ); //Initialize the visualizer

      pointcloud.addHitsToVisualizer( &vis, 1 );  //Add the hit points to visualizer

      vis.plotInteractive();
      
   }</code></pre></div>

  <!--
  \section LiDARcontext Adding geometry to the Context
  -->

  \section LiDARoutput Writing results to file

  Results of data processing can be easily written to file for external analysis.  The following table lists these functions.  Data is written to an ASCII text file, where each line in the file corresponds to a different data point (e.g., hit point, triangle, etc.).

 <table>
 <tr><th>Function</th><th>Description</th></tr>
 <tr><td>\ref LiDARcloud::exportTriangleNormals( const char* filename ) </td><td>Write the unit normal vectors [nx ny nz] of all triangles formed from triangulation.</td></tr>
 <tr><td>\ref LiDARcloud::exportTriangleNormals( const char* filename, const int gridcell ) </td><td>Write the unit normal vectors of triangles formed from triangulation that reside in a specified grid cell.</td></tr>
 <tr><td>\ref LiDARcloud::exportTriangleAreas( const char* filename ) </td><td>Write the areas of all triangles formed from triangulation.</td></tr>
 <tr><td>\ref LiDARcloud::exportTriangleAreas( const char* filename, const int gridcell ) </td><td>Write the areas of triangles formed from triangulation that reside in a specified grid cell.</td></tr>
 <tr><td>\ref LiDARcloud::exportLeafAreas( const char* filename ) </td><td>Write the leaf area contained within each voxel.  Each line of the output file corresponds to the total leaf area within each voxel.</td></tr>
 <tr><td>\ref LiDARcloud::exportLeafAreaDensities( const char* filename ) </td><td>Write the leaf area density of each voxel.  Each line of the output file corresponds to the leaf area density of each voxel.</td></tr>
 </table>

  The following code sample illustrates an example of how to write results to file.

  <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
  <pre><code>  #include "Context.h"
   #include "LiDAR.h"

   using namespace helios;

   int main( void ){

      %LiDARcloud pointcloud; //Initialize the LiDAR point cloud

      pointcloud.loadXML("/path/to/file.xml");  //Load the XML file

      pointcloud.triangulateHitPoints( 0.05, 5 ); //Perform triangulation with Lmax=0.05 and maximum aspect ratio of 5

      pointcloud.calculateLeafAreaGPU(); //Calculate leaf area for each grid cell

      uint Ncells = pointcloud.getGridCellCount(); //Get the number of grid cells
      
      char f_normals[50], f_areas[50];
      for( uint i=0; i<Ncells; i++ ){ //loop over grid cells
	       \c// define strings with output file names
	       sprintf(f_normals,"../output/triangle_normals_%d.txt",i);
	       sprintf(f_areas,"../output/triangle_areas_%d.txt",i);

	       pointcloud.exportTriangleNormals( f_normals, i );
	       pointcloud.exportTriangleAreas( f_areas, i );
      }
      pointcloud.exportLeafAreas( "../output/leaf_areas.txt" );
      pointcloud.exportLeafAreaDensities( "../output/leaf_area_densities.txt" );
      
   }</code></pre></div>
  
*/
