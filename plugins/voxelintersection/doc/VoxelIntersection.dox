/*! \page VoxelIntersectionDoc Voxel Intersection Plugin Documentation

 \tableofcontents

 <p> <br><br> </p>

 <table>
   <tr>	
     <th>Dependencies</th>
     <td>NVIDIA CUDA 6.0+</td>
   </tr>
   <tr>	
     <th>CMakeLists.txt</th>
     <td>set( PLUGINS "voxelintersection" )</td>
   </tr>
   <tr>	
     <th>Header File</th>
     <td>#include "VoxelIntersection.h"</td>
   </tr>
   <tr>	
     <th>Class</th>
     <td>\ref VoxelIntersection</td>
   </tr>
 </table>

 \section VoxelIntersectionDepends Dependencies

  <table>
    <tr>	
      <th>Package</th>
      <td>\image html apple-logo.jpg</td>
      <td>\image html unix-logo.png</td>
      <td>\image html windows-logo.jpg</td>
    </tr>
    <tr>	
      <td>NVIDIA CUDA 5.0+</td>
      <td>Mac OSX:<br><div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2"><code>$ brew install Caskroom/cask/cuda</code></div></td>
      <td>Debian/Ubuntu:<br><div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2"><code>$ sudo apt-get install cuda</code></div></td>
      <td>Unknown</td>
    </tr>
  </table>

 \section VoxelIssues Known Issues

 - Rotated voxels are currently not supported (must be axis-aligned).

 \section VoxelIntersectionConstructor Class Constructor

 <table>
   <tr>	
      <th>Constructors</th>
   </tr>
   <tr>	
     <td>\ref VoxelIntersection( helios::Context* )</td>
   </tr>
 </table>

 \section VarsAndProps Variables and Primitive Data

 \subsection VoxelIntersectionOutputData Output Primitive Data

 <table>
   <tr>	
     <th>Variable</th>
     <th>Data Type</th>
     <th>Description</th>
   </tr>
   <tr>	
     <td>primitive_UUIDs</td>
     <td>std::vector\<uint></td>
     <td>Vector of UUIDs of planar primitives (patches and triangles) contained within the given voxel. Thus, the primitive data "primitive_UUIDs" is defined only for voxels. If no elements are contained within the voxel, the vector is empty.</td>
   </tr>
 </table>

 \section VoxelIntersectionIntro Introduction

 This plug-in calculates the planar primitive elements (patches and triangles) contained within voxel volumes. Calculations are performed on the GPU to accelerate voxel intersection calculations.

 The figure below shows an array of randomly arranged patches, and one voxel. The patches inside of the voxel are colored red, which was determined using this plug-in.

 \image html "images/VoxelIntersection.png"
 
 \section VoxelIntersectionUse Using the Plug-In

 To use the voxel intersection plug-in, an instance of the \ref VoxelIntersection must be declared, whose constructor takes a pointer to the Context as an argument. This class has only one member function, which is \ref calculatePrimitiveVoxelIntersection(). If no arguments are passed to this function, it will consider all primitives in the Context. Alternatively, a vector of UUIDs can be passed as an argument, in which case only those primitives will be considered.

 When the \ref calculatePrimitiveVoxelIntersection() function is run, the plug-in will search all patches and triangles and determine whether any portion of them is contained within any voxel. The plug-in will create primitive data called ``primitive_UUIDs", which is defined only for voxels currently in the Context. This primitive is a vector of UUIDs, and contains the UUIDs of any primitives that were found to be inside of the particular voxel. If no primitives are inside of the voxel, the vector will be empty. If there are no voxels in the Context, the plug-in will do nothing.

 <div style="padding:0.5px;background-color:#D0D0D0 ;line-height:1.2;">
 <pre><code> #include "Context.h"
  #include "VoxelIntersection.h"

  using namespace helios;

  int main( void ){

      Context context;

     uint UUIDt = context.addTriangle( make_vec3(0,0,1), make_vec3(0,1,1), make_vec3(1,1,1) );

     vec3 voxel_center(0,0,1);
     vec3 voxel_size(2,2,2);
     uint UUIDv = context.addVoxel( voxel_center, voxel_size );

     VoxelIntersection intersection(&context);

     intersection.calculatePrimitiveVoxelIntersection();

     std::vector<uint> intersected_UUIDs;
     context.getPrimitiveData( UUIDv, "primitive_UUIDs", intersected_UUIDs );

     int p = std::find( intersected_UUIDs.begin(), intersected_UUIDs.end(), UUIDt );
     if( p != intersected_UUIDs.end() ){
         std::cout << "Primitive is inside voxel." << std::endl;
     }else{
         std::cout << "Primitive is not inside voxel." << std::endl;
     }
						      
  }</code></pre></div>

    
*/
